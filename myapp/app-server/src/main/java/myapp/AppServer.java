/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package myapp;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import myapp.handler.BBQMenuHandler;
// import java.util.ArrayList;
// import java.util.LinkedList;
// import java.util.List;
import myapp.handler.BBQMenuList;
import myapp.util.Prompt;

public class AppServer {
  //자바 스레드 풀 준비
  ExecutorService threadPool = Executors.newFixedThreadPool(40);

  SqlSessionFactory sqlSessionFactory;
  BBQMenuList list;

  int port;

  public AppServer(int port)throws Exception{
    this.port = port;
    //InputStream mybatisConfigIn = Resources.getResourceAsStream("myapp/config/mybatis-config.xml");
    SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();

    //sqlSessionFactory = new SqlSessionFactoryProxy(builder.build(mybatisConfigIn));
  }

  public void close() throws Exception {

  }


  public static void main(String[] args) throws Exception {
    AppServer app = new AppServer(8888);
    app.execute();
    app.close();
  }

  public void execute() {
    try (ServerSocket serverSocket = new ServerSocket(this.port)) {

      loadJson("menu.json");
      System.out.println("서버 실행중 . . . ");

      while(true) {
        Socket socket = serverSocket.accept();
        threadPool.execute(()-> processRequest(socket));
      }
    } catch (Exception e) {
      System.out.println("서버 실행 오류");
      e.printStackTrace();
    }
  }

  private void processRequest(Socket socket) {
    try (Socket s = socket;
        DataInputStream in = new DataInputStream(socket.getInputStream());
        DataOutputStream out = new DataOutputStream(socket.getOutputStream())) {

      Prompt prompt = new Prompt(in,out);

      InetSocketAddress clientAddress = (InetSocketAddress) socket.getRemoteSocketAddress();
      System.out.printf("%s 클라이언트 접속함!\n", clientAddress.getHostString());

      out.writeUTF("----------------------------------------");
      out.writeUTF("        BBQ 메뉴 선택 프로그램         ");
      out.writeUTF("----------------------------------------\n");
      menuExecute(prompt);
    } catch (Exception e) {
      System.out.println("클라이언트 통신 오류!");
    } finally {
      //((SqlSessionFactoryProxy) sqlSessionFactory).clean();
    }
  }

  private void menuExecute(Prompt prompt) throws IOException{

    BBQMenuHandler menuHandler = new BBQMenuHandler(prompt, list);
    mainMenu: while (true) {
      menuHandler.mainMenuShow();
      int mainMenuNum = Integer.parseInt(prompt.inputString(">").replaceAll("[^0-9]", ""));
      if (mainMenuNum > 0 && mainMenuNum < 13) {
        menuHandler.menuSelectShow(mainMenuNum);
      } else if (mainMenuNum == 0) {
        break;
      } else if (mainMenuNum == 13) {

      } else if (mainMenuNum == 14) {
        menuHandler.editSelectedMenu();
      } else if (mainMenuNum == 15) {
        menuHandler.orderedMenuListShow();
      } else {
        prompt.println("잘못 입력하셧습니다 ");
        prompt.println("\n\n");
        continue mainMenu;
      }

    }


  }
  private void loadJson(String filename) {
    try {
      FileReader in0 = new FileReader(filename);
      BufferedReader in = new BufferedReader(in0);

      StringBuilder strBuilder = new StringBuilder();

      String line = null;
      while ((line = in.readLine()) != null) {
        strBuilder.append(line);
      }
      Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
      list = gson.fromJson(strBuilder.toString(),
          TypeToken.getParameterized(BBQMenuList.class).getType());

      System.out.println(list.getProductList().size());
      in.close();

    } catch (Exception e) {
      System.out.println(filename + " 파일을 읽는중 오류 발생");

    }

  }

  private void loadFromDB() {

  }

}
